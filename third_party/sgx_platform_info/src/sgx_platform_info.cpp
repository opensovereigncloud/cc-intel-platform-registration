
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "sgx_urts.h"
#include "sgx_utils.h"
#include "sgx_report.h"
#include "sgx_pce.h"
#include "sgx_error.h"
#include "Enclave_u.h"
#include "sgx_platform_info.h"
#define MAX_ENCRYPTED_PPID_SIZE 384
#define PUBLIC_KEY_SIZE 388
/* Crypto_suite */
#define PCE_ALG_RSA_OAEP_3072 1

/* Signature_scheme */
#define PCE_NIST_P256_ECDSA_SHA256 0

static const uint8_t INTEL_PPIDEK[PUBLIC_KEY_SIZE] = {
    0xd3, 0x96, 0xf9, 0x43, 0x43, 0x11, 0x00, 0x1c, 0x69, 0x44, 0x9c,
    0x3b, 0xfd, 0xee, 0x8f, 0x38, 0xcd, 0x95, 0xcd, 0xad, 0x74, 0x09,
    0x7c, 0x87, 0xf1, 0xa7, 0x65, 0x02, 0x4c, 0x87, 0xc1, 0x57, 0x30,
    0xa5, 0xc9, 0xa6, 0xa4, 0xcc, 0xf9, 0x1d, 0x62, 0x18, 0x1e, 0x00,
    0xa6, 0x74, 0x27, 0x58, 0x59, 0xca, 0x1b, 0x1d, 0xf5, 0x31, 0x0e,
    0xf2, 0xd5, 0xe1, 0x79, 0x37, 0x39, 0x94, 0x3d, 0x3d, 0xe2, 0x50,
    0x93, 0x12, 0xd6, 0x03, 0xe5, 0x19, 0x3a, 0x48, 0xf0, 0xae, 0x0c,
    0x37, 0xee, 0xe0, 0x57, 0x27, 0xbd, 0xec, 0x17, 0x1b, 0x0f, 0x39,
    0x86, 0x06, 0x54, 0x20, 0x74, 0x84, 0x34, 0xbe, 0x34, 0xfa, 0x71,
    0x6f, 0xa1, 0xf5, 0x4c, 0x9a, 0x52, 0x0f, 0xc4, 0xbc, 0x2d, 0x7a,
    0x2e, 0x17, 0xe3, 0x5d, 0xa2, 0x0e, 0xca, 0x39, 0x07, 0x98, 0xa9,
    0x05, 0x1a, 0x34, 0xfb, 0x8f, 0x60, 0x9c, 0x3a, 0x1e, 0x26, 0x30,
    0x0b, 0xf3, 0xf3, 0x49, 0x40, 0xd9, 0xf7, 0x5d, 0xcb, 0xd1, 0xbf,
    0x57, 0x8d, 0xe5, 0x2d, 0xce, 0x98, 0x57, 0x35, 0xf1, 0x93, 0xc3,
    0x19, 0x2e, 0x80, 0x55, 0x37, 0xab, 0x8d, 0x64, 0x08, 0xda, 0xe6,
    0xdd, 0x64, 0xb4, 0x62, 0x83, 0x8d, 0x43, 0xaa, 0xd2, 0x7b, 0xc2,
    0x63, 0xaa, 0x97, 0xde, 0xed, 0x09, 0x92, 0xd6, 0x88, 0x56, 0x86,
    0xcd, 0x08, 0x23, 0x03, 0x27, 0x9a, 0x78, 0x7c, 0xf4, 0x36, 0x12,
    0xf5, 0xb1, 0xe6, 0x1d, 0x54, 0xab, 0x88, 0x69, 0xff, 0x18, 0x4f,
    0xdc, 0x87, 0xee, 0x34, 0xa6, 0x68, 0xb1, 0x81, 0x67, 0xb6, 0xce,
    0x0a, 0x70, 0x14, 0xbc, 0xb3, 0xe1, 0x8d, 0x76, 0x1c, 0x73, 0xde,
    0x00, 0xab, 0x41, 0xca, 0x40, 0x51, 0x53, 0x63, 0x04, 0xc3, 0x63,
    0x0b, 0xca, 0x62, 0xda, 0xaa, 0x9c, 0xe5, 0x01, 0xb7, 0xc0, 0x0f,
    0x7e, 0x0b, 0xb0, 0xbe, 0xe9, 0xf8, 0x0d, 0xb3, 0xb6, 0x64, 0xfd,
    0xcd, 0x95, 0x17, 0x9c, 0x57, 0x8e, 0xec, 0xc4, 0xac, 0x8b, 0x36,
    0x01, 0x5e, 0x4c, 0x6d, 0x1e, 0x21, 0x49, 0xa0, 0x1d, 0xde, 0x04,
    0x39, 0x6b, 0x34, 0x68, 0x44, 0xea, 0x06, 0x76, 0xe0, 0x8d, 0x1f,
    0xa2, 0xc0, 0x26, 0x05, 0xcc, 0x91, 0xbe, 0xa3, 0x17, 0xc8, 0x75,
    0x46, 0x85, 0x10, 0x39, 0x16, 0x50, 0x8e, 0x02, 0x43, 0x98, 0x31,
    0x70, 0x69, 0xd8, 0x34, 0x71, 0x82, 0xe7, 0x48, 0x26, 0xcd, 0xc1,
    0x82, 0xd3, 0xeb, 0x6f, 0xe9, 0x58, 0xe7, 0x06, 0x77, 0x10, 0x1f,
    0xdf, 0x49, 0x76, 0x30, 0xa7, 0x68, 0x42, 0xb0, 0x16, 0xd7, 0xda,
    0x92, 0x75, 0xd5, 0x7f, 0x2e, 0x75, 0x43, 0xac, 0x83, 0xb0, 0x1f,
    0xc3, 0x90, 0x19, 0xce, 0xaa, 0x94, 0xd0, 0x2e, 0x5a, 0x6c, 0x13,
    0x72, 0xe7, 0xa6, 0xb5, 0xc0, 0x45, 0x81, 0xe3, 0x53, 0x27, 0x00,
    0x01, 0x00, 0x01};

using namespace std;

static bool create_app_enclave_report(sgx_report_t *app_report)
{

    bool ret = true;
    uint32_t retval = 0;
    sgx_status_t sgx_status = SGX_SUCCESS;
    sgx_enclave_id_t eid = 0;
    int launch_token_updated = 0;
    sgx_launch_token_t launch_token = {0};
    sgx_target_info_t pce_target_info = {0};

    sgx_isv_svn_t p_isvsvn = {0};

    sgx_pce_error_t pce_ret = SGX_PCE_SUCCESS;

    pce_ret = sgx_pce_get_target(&pce_target_info, &p_isvsvn);
    if (SGX_PCE_SUCCESS != pce_ret)
    {
        ret = false;
        goto CLEANUP;
    }

    sgx_status = sgx_create_enclave(ENCLAVE_PATH,
                                    0,
                                    &launch_token,
                                    &launch_token_updated,
                                    &eid,
                                    NULL);
    if (SGX_SUCCESS != sgx_status)
    {
        ret = false;
        goto CLEANUP;
    }

    sgx_status = enclave_create_report(eid,
                                       &retval,
                                       &pce_target_info,
                                       app_report);

    if ((SGX_SUCCESS != sgx_status) || (0 != retval))
    {
        ret = false;
        goto CLEANUP;
    }

CLEANUP:
    sgx_destroy_enclave(eid);
    return ret;
}

extern "C" u_int32_t get_platform_info(platform_info_t *platform_info)
{

    sgx_report_t app_report = {0};
    uint32_t encrypted_ppid_out_size;
    uint8_t signature_scheme;

    if (!create_app_enclave_report(&app_report))
    {

        return ENCLAVE_CREATE_FAIL;
    }
    sgx_pce_error_t pce_status = sgx_get_pce_info(
        &app_report,
        INTEL_PPIDEK,
        PUBLIC_KEY_SIZE,
        PCE_ALG_RSA_OAEP_3072,
        platform_info->encrypted_ppid,
        MAX_ENCRYPTED_PPID_SIZE,
        &platform_info->encrypted_ppid_out_size,
        &platform_info->pce_info.pce_isv_svn,
        &platform_info->pce_info.pce_id,
        &signature_scheme);

    return pce_status;
}
